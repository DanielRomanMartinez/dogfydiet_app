// Mocks generated by Mockito 5.4.6 from annotations
// in dogfydiet_app/test/application/screens/home/pay_subscription_screen/pay_subscription_screen_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dogfydiet_app/domain/model/value_objects/geo_location_responde.dart'
    as _i2;
import 'package:dogfydiet_app/domain/model/value_objects/location_data.dart'
    as _i5;
import 'package:dogfydiet_app/domain/model/value_objects/permission_status.dart'
    as _i7;
import 'package:dogfydiet_app/domain/services/core/geo_location_service.dart'
    as _i3;
import 'package:dogfydiet_app/domain/services/core/permissions_service.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGeolocationResponse_0 extends _i1.SmartFake
    implements _i2.GeolocationResponse {
  _FakeGeolocationResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GeolocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocationService extends _i1.Mock
    implements _i3.GeolocationService {
  MockGeolocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.GeolocationResponse> getCurrentLocation() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i4.Future<_i2.GeolocationResponse>.value(
            _FakeGeolocationResponse_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i4.Future<_i2.GeolocationResponse>);

  @override
  _i4.Future<_i5.LocationData?> getAddressFromCoordinates(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressFromCoordinates,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i4.Future<_i5.LocationData?>.value(),
      ) as _i4.Future<_i5.LocationData?>);

  @override
  _i4.Future<bool> isLocationServiceAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceAvailable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i6.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.PermissionStatus> checkLocationPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkLocationPermission,
          [],
        ),
        returnValue: _i4.Future<_i7.PermissionStatus>.value(
            _i7.PermissionStatus.granted),
      ) as _i4.Future<_i7.PermissionStatus>);

  @override
  _i4.Future<_i7.PermissionStatus> requestLocationPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #requestLocationPermission,
          [],
        ),
        returnValue: _i4.Future<_i7.PermissionStatus>.value(
            _i7.PermissionStatus.granted),
      ) as _i4.Future<_i7.PermissionStatus>);

  @override
  _i4.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestLocationService() => (super.noSuchMethod(
        Invocation.method(
          #requestLocationService,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
