// Mocks generated by Mockito 5.4.6 from annotations
// in dogfydiet_app/test/application/screens/preferences/preferences_screen/preferences_screen_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dogfydiet_app/domain/model/value_objects/language.dart' as _i2;
import 'package:dogfydiet_app/domain/repositories/language_repository.dart'
    as _i5;
import 'package:dogfydiet_app/domain/services/core/system_preferences_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLanguage_0 extends _i1.SmartFake implements _i2.Language {
  _FakeLanguage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SystemPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSystemPreferencesService extends _i1.Mock
    implements _i3.SystemPreferencesService {
  MockSystemPreferencesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool getIsDarkModeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #getIsDarkModeEnabled,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> setDarkModeEnabled(bool? isActive) => (super.noSuchMethod(
        Invocation.method(
          #setDarkModeEnabled,
          [isActive],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSavedLanguage(String? languageCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSavedLanguage,
          [languageCode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LanguageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageRepository extends _i1.Mock
    implements _i5.LanguageRepository {
  MockLanguageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Language> getLanguages() => (super.noSuchMethod(
        Invocation.method(
          #getLanguages,
          [],
        ),
        returnValue: <_i2.Language>[],
      ) as List<_i2.Language>);

  @override
  _i2.Language? getLanguageByCode(String? code) =>
      (super.noSuchMethod(Invocation.method(
        #getLanguageByCode,
        [code],
      )) as _i2.Language?);

  @override
  _i2.Language getDefaultLanguage() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultLanguage,
          [],
        ),
        returnValue: _FakeLanguage_0(
          this,
          Invocation.method(
            #getDefaultLanguage,
            [],
          ),
        ),
      ) as _i2.Language);

  @override
  _i2.Language getSystemLanguage() => (super.noSuchMethod(
        Invocation.method(
          #getSystemLanguage,
          [],
        ),
        returnValue: _FakeLanguage_0(
          this,
          Invocation.method(
            #getSystemLanguage,
            [],
          ),
        ),
      ) as _i2.Language);

  @override
  bool isLanguageSupported(String? code) => (super.noSuchMethod(
        Invocation.method(
          #isLanguageSupported,
          [code],
        ),
        returnValue: false,
      ) as bool);
}
